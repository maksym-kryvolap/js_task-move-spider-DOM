{"version":3,"sources":["scripts/main.js"],"names":["document","addEventListener","e","spider","querySelector","halfSpiderSize","clientHeight","wall","minClickX","offsetWidth","clientWidth","offsetLeft","maxClickX","minClickY","offsetHeight","offsetTop","maxClickY","spiderMaxCoordsX","spiderMaxCoordsY","target","className","parseInt","clientX","style","left","clientY","top"],"mappings":";AAAA,aAEAA,SAASC,iBAAiB,QAAS,SAAAC,GAC3BC,IAAAA,EAASH,SAASI,cAAc,WAChCC,EAAiBF,EAAOG,aAAe,EACvCC,EAAOP,SAASI,cAAc,SAE9BI,GAAaD,EAAKE,YAAcF,EAAKG,aACvC,EAAIH,EAAKI,WAEPC,GAAaL,EAAKE,YAAcF,EAAKG,aACvC,EAAIH,EAAKI,WAAaJ,EAAKG,YAEzBG,GAAaN,EAAKO,aAAeP,EAAKD,cACxC,EAAIC,EAAKQ,UAEPC,GAAaT,EAAKO,aAAeP,EAAKD,cACxC,EAAIC,EAAKQ,UAAYR,EAAKD,aAExBW,EAAmBT,EAAYD,EAAKG,YAAcL,EAElDa,EAAmBL,EAAYN,EAAKD,aAAeD,EAE9B,SAAvBH,EAAEiB,OAAOC,YAITC,SAASnB,EAAEoB,UAAYd,GACtBa,SAASnB,EAAEoB,UAAYV,IAC1BT,EAAOoB,MAAMC,KAAQtB,EAAEoB,QAAUd,EAAYH,EAAkB,KAE3DgB,SAASlB,EAAOoB,MAAMC,MAAQ,GAC5BH,SAASlB,EAAOoB,MAAMC,MAAQnB,GAAmB,IACrDF,EAAOoB,MAAMC,KAAO,GAGlBH,SAASlB,EAAOoB,MAAMC,OAASjB,EAAKG,aAClCW,SAASnB,EAAEoB,UAAYL,IAC3Bd,EAAOoB,MAAMC,KAAUjB,GAAAA,OAAAA,EAAKG,YAAcP,EAAOO,YAAjD,QAIAW,SAASnB,EAAEuB,UAAYZ,GACtBQ,SAASnB,EAAEuB,UAAYT,IAC1Bb,EAAOoB,MAAMG,IAAOxB,EAAEuB,QAAUZ,EAAYR,EAAkB,KAE1DgB,SAASlB,EAAOoB,MAAMG,KAAO,GAC3BL,SAASlB,EAAOoB,MAAMG,KAAOrB,GAAmB,IACpDF,EAAOoB,MAAMG,IAAM,GAGjBL,SAASlB,EAAOoB,MAAMG,MAAQnB,EAAKD,cACjCe,SAASnB,EAAEuB,UAAYP,IAC3Bf,EAAOoB,MAAMG,IAASnB,GAAAA,OAAAA,EAAKD,aAAeH,EAAOG,aAAjD","file":"main.ca6e1d93.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\ndocument.addEventListener('click', e => {\n  const spider = document.querySelector('.spider');\n  const halfSpiderSize = spider.clientHeight / 2;\n  const wall = document.querySelector('.wall');\n\n  const minClickX = (wall.offsetWidth - wall.clientWidth)\n    / 2 + wall.offsetLeft;\n\n  const maxClickX = (wall.offsetWidth - wall.clientWidth)\n    / 2 + wall.offsetLeft + wall.clientWidth;\n\n  const minClickY = (wall.offsetHeight - wall.clientHeight)\n    / 2 + wall.offsetTop;\n\n  const maxClickY = (wall.offsetHeight - wall.clientHeight)\n    / 2 + wall.offsetTop + wall.clientHeight;\n\n  const spiderMaxCoordsX = minClickX + wall.clientWidth - halfSpiderSize;\n\n  const spiderMaxCoordsY = minClickY + wall.clientHeight - halfSpiderSize;\n\n  if (e.target.className !== 'wall') {\n    return;\n  }\n\n  if (parseInt(e.clientX) >= minClickX\n    && parseInt(e.clientX) <= maxClickX) {\n    spider.style.left = (e.clientX - minClickX - halfSpiderSize) + 'px';\n\n    if (parseInt(spider.style.left) < 0\n      && (parseInt(spider.style.left) + halfSpiderSize) >= 0) {\n      spider.style.left = 0;\n    }\n\n    if (parseInt(spider.style.left) <= wall.clientWidth\n      && (parseInt(e.clientX) >= spiderMaxCoordsX)) {\n      spider.style.left = `${wall.clientWidth - spider.clientWidth}px`;\n    }\n  }\n\n  if (parseInt(e.clientY) >= minClickY\n    && parseInt(e.clientY) <= maxClickY) {\n    spider.style.top = (e.clientY - minClickY - halfSpiderSize) + 'px';\n\n    if (parseInt(spider.style.top) < 0\n      && (parseInt(spider.style.top) + halfSpiderSize) >= 0) {\n      spider.style.top = 0;\n    }\n\n    if (parseInt(spider.style.top) <= wall.clientHeight\n      && (parseInt(e.clientY) >= spiderMaxCoordsY)) {\n      spider.style.top = `${wall.clientHeight - spider.clientHeight}px`;\n    }\n  }\n});\n"]}